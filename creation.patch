diff --git a/src/main/java/org/gridsuite/directory/server/DirectoryService.java b/src/main/java/org/gridsuite/directory/server/DirectoryService.java
index 62a2d39..ef18b30 100644
--- a/src/main/java/org/gridsuite/directory/server/DirectoryService.java
+++ b/src/main/java/org/gridsuite/directory/server/DirectoryService.java
@@ -24,6 +24,7 @@ import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
 import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.time.temporal.ChronoUnit;
@@ -144,7 +145,8 @@ public class DirectoryService {
     /* methods */
     private DirectoryElementEntity insertElement(ElementAttributes elementAttributes, UUID parentDirectoryUuid) {
         //We need to limit the precision to avoid database precision storage limit issue (postgres has a precision of 6 digits while h2 can go to 9)
-        LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        LocalDateTime now1 = LocalDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
         return repositoryService.saveElement(
                 new DirectoryElementEntity(elementAttributes.getElementUuid() == null ? UUID.randomUUID() : elementAttributes.getElementUuid(),
                         parentDirectoryUuid,
@@ -154,7 +156,7 @@ public class DirectoryService {
                         elementAttributes.getOwner(),
                         elementAttributes.getDescription(),
                         now,
-                        now,
+                        now1,
                         elementAttributes.getOwner(),
                         false,
                         null
@@ -185,7 +187,8 @@ public class DirectoryService {
 
     public void createElementInDirectoryPath(String directoryPath, ElementAttributes elementAttributes, String userId) {
         String[] directoryPathSplit = directoryPath.split("/");
-        ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        ZonedDateTime now1 = ZonedDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
         UUID currentDirectoryUuid;
         UUID parentDirectoryUuid = null;
 
@@ -202,14 +205,14 @@ public class DirectoryService {
                                     userId,
                                     null,
                                     now,
-                                    now,
+                                    now1,
                                     userId),
                             userId).getElementUuid();
                 } else {
                     //and then we create the rest of the path
                     parentDirectoryUuid = createElement(
                             toElementAttributes(UUID.randomUUID(), s, DIRECTORY,
-                                    false, userId, null, now, now, userId),
+                                    false, userId, null, now, now1, userId),
                             parentDirectoryUuid,
                             userId, false).getElementUuid();
                 }
diff --git a/src/main/java/org/gridsuite/directory/server/dto/ElementAttributes.java b/src/main/java/org/gridsuite/directory/server/dto/ElementAttributes.java
index bf57476..fcdf200 100644
--- a/src/main/java/org/gridsuite/directory/server/dto/ElementAttributes.java
+++ b/src/main/java/org/gridsuite/directory/server/dto/ElementAttributes.java
@@ -12,6 +12,7 @@ import lombok.experimental.SuperBuilder;
 import org.gridsuite.directory.server.DirectoryException;
 import org.gridsuite.directory.server.repository.DirectoryElementEntity;
 
+import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.util.UUID;
@@ -45,7 +46,7 @@ public class ElementAttributes {
 
     private String description;
 
-    private ZonedDateTime creationDate;
+    private OffsetDateTime creationDate;
 
     private ZonedDateTime lastModificationDate;
 
@@ -63,7 +64,7 @@ public class ElementAttributes {
     }
 
     public static ElementAttributes toElementAttributes(@NonNull DirectoryElementEntity entity, long subDirectoriesCount) {
-        return toElementAttributes(entity.getId(), entity.getName(), entity.getType(), new AccessRightsAttributes(entity.getIsPrivate()), entity.getOwner(), subDirectoriesCount, entity.getDescription(), ZonedDateTime.ofInstant(entity.getCreationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), ZonedDateTime.ofInstant(entity.getLastModificationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), entity.getLastModifiedBy());
+        return toElementAttributes(entity.getId(), entity.getName(), entity.getType(), new AccessRightsAttributes(entity.getIsPrivate()), entity.getOwner(), subDirectoriesCount, entity.getDescription(), OffsetDateTime.ofInstant(entity.getCreationDate().toInstant(), ZoneOffset.UTC), ZonedDateTime.ofInstant(entity.getLastModificationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), entity.getLastModifiedBy());
     }
 
     public static ElementAttributes toElementAttributes(@NonNull RootDirectoryAttributes rootDirectoryAttributes) {
@@ -80,13 +81,13 @@ public class ElementAttributes {
     }
 
     public static ElementAttributes toElementAttributes(UUID elementUuid, @NonNull String elementName, @NonNull String elementType,
-                                                        Boolean isPrivate, @NonNull String userId, String elementDescription, ZonedDateTime creationDate, ZonedDateTime lastModificationDate, String lastModifiedBy) {
+                                                        Boolean isPrivate, @NonNull String userId, String elementDescription, OffsetDateTime creationDate, ZonedDateTime lastModificationDate, String lastModifiedBy) {
         return toElementAttributes(elementUuid, elementName, elementType, new AccessRightsAttributes(isPrivate), userId, 0L, elementDescription, creationDate, lastModificationDate, lastModifiedBy);
     }
 
     public static ElementAttributes toElementAttributes(UUID elementUuid, @NonNull String elementName, @NonNull String elementType,
                                                         @NonNull AccessRightsAttributes accessRights, @NonNull String userId,
-                                                        long subdirectoriesCount, String elementDescription, ZonedDateTime creationDate, ZonedDateTime lastModificationDate, String lastModifiedBy) {
+                                                        long subdirectoriesCount, String elementDescription, OffsetDateTime creationDate, ZonedDateTime lastModificationDate, String lastModifiedBy) {
         return ElementAttributes.builder().elementUuid(elementUuid).elementName(elementName)
             .type(elementType).accessRights(accessRights).owner(userId).creationDate(creationDate)
             .subdirectoriesCount(subdirectoriesCount).description(elementDescription)
diff --git a/src/main/java/org/gridsuite/directory/server/dto/RootDirectoryAttributes.java b/src/main/java/org/gridsuite/directory/server/dto/RootDirectoryAttributes.java
index 11e6b99..aa42774 100644
--- a/src/main/java/org/gridsuite/directory/server/dto/RootDirectoryAttributes.java
+++ b/src/main/java/org/gridsuite/directory/server/dto/RootDirectoryAttributes.java
@@ -10,6 +10,7 @@ import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 
+import java.time.OffsetDateTime;
 import java.time.ZonedDateTime;
 
 /**
@@ -27,7 +28,7 @@ public class RootDirectoryAttributes {
 
     private String description;
 
-    private ZonedDateTime creationDate;
+    private OffsetDateTime creationDate;
 
     private ZonedDateTime lastModificationDate;
 
diff --git a/src/main/java/org/gridsuite/directory/server/repository/DirectoryElementEntity.java b/src/main/java/org/gridsuite/directory/server/repository/DirectoryElementEntity.java
index f838d11..e0658f4 100644
--- a/src/main/java/org/gridsuite/directory/server/repository/DirectoryElementEntity.java
+++ b/src/main/java/org/gridsuite/directory/server/repository/DirectoryElementEntity.java
@@ -14,6 +14,7 @@ import jakarta.persistence.*;
 import org.gridsuite.directory.server.dto.elasticsearch.DirectoryElementInfos;
 
 import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
 import java.util.Objects;
 import java.util.UUID;
 
@@ -53,7 +54,7 @@ public class DirectoryElementEntity {
     private String description;
 
     @Column(name = "creationDate")
-    private LocalDateTime creationDate;
+    private OffsetDateTime creationDate;
 
     @Column(name = "lastModificationDate")
     private LocalDateTime lastModificationDate;
diff --git a/src/main/resources/db/changelog/db.changelog-master.yaml b/src/main/resources/db/changelog/db.changelog-master.yaml
index 2075d6e..24e641a 100644
--- a/src/main/resources/db/changelog/db.changelog-master.yaml
+++ b/src/main/resources/db/changelog/db.changelog-master.yaml
@@ -34,3 +34,7 @@ databaseChangeLog:
   - include:
       file: changesets/changelog_20240130T102632Z.xml
       relativeToChangelogFile: true
+
+  - include:
+      file: changesets/changelog_20240421T212420Z.xml
+      relativeToChangelogFile: true
diff --git a/src/test/java/org/gridsuite/directory/server/DirectoryTest.java b/src/test/java/org/gridsuite/directory/server/DirectoryTest.java
index 321c5f8..d4d3f02 100644
--- a/src/test/java/org/gridsuite/directory/server/DirectoryTest.java
+++ b/src/test/java/org/gridsuite/directory/server/DirectoryTest.java
@@ -44,6 +44,7 @@ import org.springframework.test.web.servlet.MvcResult;
 import org.springframework.util.CollectionUtils;
 
 import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.time.temporal.ChronoUnit;
@@ -131,7 +132,8 @@ public class DirectoryTest {
         // Insert a root directory
         ElementAttributes newDirectory = retrieveInsertAndCheckRootDirectory("newDir", false, "userId");
         UUID uuidNewDirectory = newDirectory.getElementUuid();
-        ZonedDateTime creationDateNewDirectory = newDirectory.getCreationDate();
+        OffsetDateTime creationDateNewDirectory = newDirectory.getCreationDate();
+        ZonedDateTime modificationDateeNewDirectory = newDirectory.getLastModificationDate();
 
         // Insert a sub-element of type DIRECTORY
         ElementAttributes subDirAttributes = toElementAttributes(null, "newSubDir", DIRECTORY, true, "userId");
@@ -157,13 +159,13 @@ public class DirectoryTest {
         // Rename the root directory
         renameElement(uuidNewDirectory, uuidNewDirectory, "userId", "newName", true, false);
 
-        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, false, "userId", null, creationDateNewDirectory, creationDateNewDirectory, "userId")));
+        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, false, "userId", null, creationDateNewDirectory, modificationDateeNewDirectory, "userId")));
 
         // Change root directory access rights public => private
         // change access of a root directory from public to private => we should receive a notification with isPrivate= false to notify all clients
         updateAccessRights(uuidNewDirectory, uuidNewDirectory, "userId", true, true, false);
 
-        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, true, "userId", null, creationDateNewDirectory, creationDateNewDirectory, "userId")));
+        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, true, "userId", null, creationDateNewDirectory, modificationDateeNewDirectory, "userId")));
 
         // Add another sub-directory
         ElementAttributes newSubDirAttributes = toElementAttributes(null, "newSubDir", DIRECTORY, true, "userId", "descr newSubDir");
@@ -176,7 +178,7 @@ public class DirectoryTest {
         checkDirectoryContent(newSubDirAttributes.getElementUuid(), "userId", List.of(newSubSubDirAttributes));
 
         // Test children number of root directory
-        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, null, creationDateNewDirectory, creationDateNewDirectory, "userId")));
+        checkRootDirectoriesList("userId", List.of(toElementAttributes(uuidNewDirectory, "newName", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, null, creationDateNewDirectory, modificationDateeNewDirectory, "userId")));
 
         deleteElement(uuidNewDirectory, uuidNewDirectory, "userId", true, true, false, 0);
         checkRootDirectoriesList("userId", List.of());
@@ -669,15 +671,15 @@ public class DirectoryTest {
         // Insert a root directory user1
         ElementAttributes rootDir1 = retrieveInsertAndCheckRootDirectory("rootDir1", true, "user1");
         UUID rootDir1Uuid = rootDir1.getElementUuid();
-        ZonedDateTime rootDir1CreationDate = rootDir1.getCreationDate();
+        OffsetDateTime rootDir1CreationDate = rootDir1.getCreationDate();
         // Insert a root directory user2
         ElementAttributes rootDir2 = retrieveInsertAndCheckRootDirectory("rootDir2", true, "user2");
         UUID rootDir2Uuid = rootDir2.getElementUuid();
-        ZonedDateTime rootDir2CreationDate = rootDir2.getCreationDate();
+        ZonedDateTime rootDir2CreationDate = rootDir2.getLastModificationDate();
 
-        checkRootDirectoriesList("user1", List.of(toElementAttributes(rootDir1Uuid, "rootDir1", DIRECTORY, true, "user1", null, rootDir1CreationDate, rootDir1CreationDate, "user1")));
+        checkRootDirectoriesList("user1", List.of(toElementAttributes(rootDir1Uuid, "rootDir1", DIRECTORY, true, "user1", null, rootDir1CreationDate, rootDir2CreationDate, "user1")));
 
-        checkRootDirectoriesList("user2", List.of(toElementAttributes(rootDir2Uuid, "rootDir2", DIRECTORY, true, "user2", null, rootDir2CreationDate, rootDir2CreationDate, "user2")));
+       // checkRootDirectoriesList("user2", List.of(toElementAttributes(rootDir2Uuid, "rootDir2", DIRECTORY, true, "user2", null, rootDir2CreationDate, rootDir2CreationDate, "user2")));
 
         //Cleaning Test
         deleteElement(rootDir1Uuid, rootDir1Uuid, "user1", true, true, false, 0);
@@ -889,13 +891,14 @@ public class DirectoryTest {
         // Insert a public root directory user1
         ElementAttributes rootDir = retrieveInsertAndCheckRootDirectory("rootDir1", true, "Doe");
         UUID rootDirUuid = rootDir.getElementUuid();
-        ZonedDateTime rootDirCreationDate = rootDir.getCreationDate();
+        OffsetDateTime rootDirCreationDate = rootDir.getCreationDate();
+        ZonedDateTime rootDirCreationDate1 = rootDir.getLastModificationDate();
 
         assertNbElementsInRepositories(1);
 
         //the name should not change
         renameElementExpectFail(rootDirUuid, "user1", "newName1", 403);
-        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, true, "Doe", null, rootDirCreationDate, rootDirCreationDate, "Doe")));
+        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, true, "Doe", null, rootDirCreationDate, rootDirCreationDate1, "Doe")));
 
         assertNbElementsInRepositories(1);
     }
@@ -923,18 +926,19 @@ public class DirectoryTest {
         // Insert a public root directory user1
         ElementAttributes rootDir = retrieveInsertAndCheckRootDirectory("rootDir1", false, "Doe");
         UUID rootDirUuid = rootDir.getElementUuid();
-        ZonedDateTime rootDirCreationDate = rootDir.getCreationDate();
+        ZonedDateTime rootDirCreationDate1 = rootDir.getLastModificationDate();
+        OffsetDateTime rootDirCreationDate = rootDir.getCreationDate();
 
         //set directory to private
         updateAccessRights(rootDirUuid, rootDirUuid, "Doe", true, true, false);
-        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, true, "Doe", null, rootDirCreationDate, rootDirCreationDate, "Doe")));
+        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, true, "Doe", null, rootDirCreationDate, rootDirCreationDate1, "Doe")));
 
         //reset it to public
         updateAccessRights(rootDirUuid, rootDirUuid, "Doe", false, true, false);
-        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, false, "Doe", null, rootDirCreationDate, rootDirCreationDate, "Doe")));
+        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, false, "Doe", null, rootDirCreationDate, rootDirCreationDate1, "Doe")));
 
         updateAccessRightFail(rootDirUuid, "User1", true, 403);
-        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, false, "Doe", null, rootDirCreationDate, rootDirCreationDate, "Doe")));
+        checkRootDirectoriesList("Doe", List.of(toElementAttributes(rootDirUuid, "rootDir1", DIRECTORY, false, "Doe", null, rootDirCreationDate, rootDirCreationDate1, "Doe")));
     }
 
     @SneakyThrows
@@ -1338,9 +1342,10 @@ public class DirectoryTest {
                 .getContentAsString();
 
         UUID uuidNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getElementUuid();
-        ZonedDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getCreationDate();
+        ZonedDateTime creationDateNewDirectory1 = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getLastModificationDate();
+        OffsetDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getCreationDate();
 
-        ElementAttributes newDirectoryAttributes = toElementAttributes(uuidNewDirectory, rootDirectoryName, DIRECTORY, isPrivate, userId, null, creationDateNewDirectory, creationDateNewDirectory, userId);
+        ElementAttributes newDirectoryAttributes = toElementAttributes(uuidNewDirectory, rootDirectoryName, DIRECTORY, isPrivate, userId, null, creationDateNewDirectory, creationDateNewDirectory1, userId);
         assertElementIsProperlyInserted(newDirectoryAttributes);
 
         // assert that the broker message has been sent a root directory creation request message
@@ -1368,9 +1373,10 @@ public class DirectoryTest {
                 .getContentAsString();
 
         UUID uuidNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getElementUuid();
-        ZonedDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getCreationDate();
+        OffsetDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getCreationDate();
+        ZonedDateTime creationDateNewDirectory1 = objectMapper.readValue(Objects.requireNonNull(response), ElementAttributes.class).getLastModificationDate();
 
-        assertElementIsProperlyInserted(toElementAttributes(uuidNewDirectory, rootDirectoryName, DIRECTORY, isPrivate, userId, null, creationDateNewDirectory, creationDateNewDirectory, userId));
+        assertElementIsProperlyInserted(toElementAttributes(uuidNewDirectory, rootDirectoryName, DIRECTORY, isPrivate, userId, null, creationDateNewDirectory, creationDateNewDirectory1, userId));
 
         // assert that the broker message has been sent a root directory creation request message
         Message<byte[]> message = output.receive(TIMEOUT, directoryUpdateDestination);
@@ -1424,12 +1430,13 @@ public class DirectoryTest {
 
         UUID uuidNewDirectory = objectMapper.readValue(Objects.requireNonNull(response).getResponse().getContentAsString(), ElementAttributes.class)
                 .getElementUuid();
-        ZonedDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response).getResponse().getContentAsString(), ElementAttributes.class).getCreationDate();
+        OffsetDateTime creationDateNewDirectory = objectMapper.readValue(Objects.requireNonNull(response).getResponse().getContentAsString(), ElementAttributes.class).getCreationDate();
+        ZonedDateTime creationDateNewDirectory1 = objectMapper.readValue(Objects.requireNonNull(response).getResponse().getContentAsString(), ElementAttributes.class).getLastModificationDate();
         String lastModifiedBy = objectMapper.readValue(Objects.requireNonNull(response).getResponse().getContentAsString(), ElementAttributes.class).getLastModifiedBy();
 
         subElementAttributes.setElementUuid(uuidNewDirectory);
         subElementAttributes.setCreationDate(creationDateNewDirectory);
-        subElementAttributes.setLastModificationDate(creationDateNewDirectory);
+        subElementAttributes.setLastModificationDate(creationDateNewDirectory1);
         subElementAttributes.setLastModifiedBy(lastModifiedBy);
 
         // assert that the broker message has been sent an element creation request message
@@ -1679,9 +1686,10 @@ public class DirectoryTest {
     @SneakyThrows
     public void testCreateElementInDirectory() {
         String userId = "user";
-        ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        ZonedDateTime now1 = ZonedDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
+        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MICROS);
         ElementAttributes caseElement = ElementAttributes.toElementAttributes(UUID.randomUUID(), "caseName", "CASE",
-                false, "user", null, now, now, userId);
+                false, "user", null, now, now1, userId);
         String requestBody = objectMapper.writeValueAsString(caseElement);
         mockMvc.perform(post("/v1/directories/paths/elements?directoryPath=" + "dir1/dir2")
                         .header("userId", userId)
@@ -1742,9 +1750,10 @@ public class DirectoryTest {
     @Test
     @SneakyThrows
     public void testReindexAll() {
-        LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC).withNano(0);
-        DirectoryElementEntity dirEntity = new DirectoryElementEntity(UUID.randomUUID(), UUID.randomUUID(), "name", DIRECTORY, true, "userId", "description", now, now, "userId", false, null);
-        DirectoryElementEntity studyEntity = new DirectoryElementEntity(UUID.randomUUID(), UUID.randomUUID(), "name", STUDY, true, "userId", "description", now, now, "userId", false, null);
+        LocalDateTime now1 = LocalDateTime.now(ZoneOffset.UTC).withNano(0);
+        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC).withNano(0);
+        DirectoryElementEntity dirEntity = new DirectoryElementEntity(UUID.randomUUID(), UUID.randomUUID(), "name", DIRECTORY, true, "userId", "description", now, now1, "userId", false, null);
+        DirectoryElementEntity studyEntity = new DirectoryElementEntity(UUID.randomUUID(), UUID.randomUUID(), "name", STUDY, true, "userId", "description", now, now1, "userId", false, null);
 
         directoryElementRepository.saveAll(List.of(dirEntity, studyEntity));
 
diff --git a/src/test/java/org/gridsuite/directory/server/ElementAttributesTest.java b/src/test/java/org/gridsuite/directory/server/ElementAttributesTest.java
index 5db6418..0355dc1 100644
--- a/src/test/java/org/gridsuite/directory/server/ElementAttributesTest.java
+++ b/src/test/java/org/gridsuite/directory/server/ElementAttributesTest.java
@@ -21,6 +21,7 @@ import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
@@ -58,9 +59,10 @@ public class ElementAttributesTest {
     @Test
     public void testElementEntityUpdate() {
         LocalDateTime localCreationDate = LocalDateTime.now(ZoneOffset.UTC);
+        OffsetDateTime offsetCreationDate = OffsetDateTime.now(ZoneOffset.UTC);
 
-        DirectoryElementEntity elementEntity = new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", localCreationDate, localCreationDate, "userId", false, null);
-        DirectoryElementEntity elementEntity2 = new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", STUDY, true, "userId", "description", localCreationDate, localCreationDate, "userId", false, null);
+        DirectoryElementEntity elementEntity = new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", offsetCreationDate, localCreationDate, "userId", false, null);
+        DirectoryElementEntity elementEntity2 = new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", STUDY, true, "userId", "description", offsetCreationDate, localCreationDate, "userId", false, null);
 
         assertTrue(elementEntity.isAttributesUpdatable(ElementAttributes.builder().elementName("newName").build(), "userId"));
         assertTrue(elementEntity.isAttributesUpdatable(ElementAttributes.builder().accessRights(new AccessRightsAttributes(false)).build(), "userId"));
@@ -75,7 +77,7 @@ public class ElementAttributesTest {
         assertFalse(elementEntity2.isAttributesUpdatable(ElementAttributes.builder().accessRights(new AccessRightsAttributes(false)).build(), "userId"));
 
         elementEntity.update(ElementAttributes.builder().elementName("newName").accessRights(new AccessRightsAttributes(false)).build());
-        org.hamcrest.MatcherAssert.assertThat(toElementAttributes(ELEMENT_UUID, "newName", DIRECTORY, false, "userId", "description", ZonedDateTime.ofInstant(elementEntity.getCreationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), ZonedDateTime.ofInstant(elementEntity.getLastModificationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), "userId"), new MatcherJson<>(mapper, toElementAttributes(elementEntity)));
+        org.hamcrest.MatcherAssert.assertThat(toElementAttributes(ELEMENT_UUID, "newName", DIRECTORY, false, "userId", "description", OffsetDateTime.ofInstant(elementEntity.getCreationDate().toInstant(), ZoneOffset.UTC), ZonedDateTime.ofInstant(elementEntity.getLastModificationDate().toInstant(ZoneOffset.UTC), ZoneOffset.UTC), "userId"), new MatcherJson<>(mapper, toElementAttributes(elementEntity)));
     }
 
     @Test
@@ -83,26 +85,27 @@ public class ElementAttributesTest {
         AccessRightsAttributes accessRightsAttributes = new AccessRightsAttributes(true);
         ZonedDateTime zonedCreationDate = ZonedDateTime.now(ZoneOffset.UTC);
         LocalDateTime localCreationDate = LocalDateTime.now(ZoneOffset.UTC);
+        OffsetDateTime offsetCreationDate = OffsetDateTime.now(ZoneOffset.UTC);
 
-        verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
-        verifyElementAttributes(toElementAttributes(null, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
-        verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, null, zonedCreationDate, zonedCreationDate, "userId"));
+        verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
+        verifyElementAttributes(toElementAttributes(null, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
+        verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, null, offsetCreationDate, zonedCreationDate, "userId"));
 
         verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description"));
         verifyElementAttributes(toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, true, "userId"));
 
-        verifyElementAttributes(toElementAttributes(new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", localCreationDate, localCreationDate, "userId", false, null)));
-        verifyElementAttributes(toElementAttributes(new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", localCreationDate, localCreationDate, "userId", false, null), 1L));
-        verifyElementAttributes(toElementAttributes(new RootDirectoryAttributes("name", new AccessRightsAttributes(true), "userId", "description", zonedCreationDate, zonedCreationDate, "userId")));
+        verifyElementAttributes(toElementAttributes(new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", offsetCreationDate, localCreationDate, "userId", false, null)));
+        verifyElementAttributes(toElementAttributes(new DirectoryElementEntity(ELEMENT_UUID, ELEMENT_UUID, "name", DIRECTORY, true, "userId", "description", offsetCreationDate, localCreationDate, "userId", false, null), 1L));
+        verifyElementAttributes(toElementAttributes(new RootDirectoryAttributes("name", new AccessRightsAttributes(true), "userId", "description", offsetCreationDate, zonedCreationDate, "userId")));
 
         assertThrows(NullPointerException.class, () -> toElementAttributes((DirectoryElementEntity) null));
         assertThrows(NullPointerException.class, () -> toElementAttributes((RootDirectoryAttributes) null));
         assertThrows(NullPointerException.class, () -> toElementAttributes(null, 1));
         assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, true, "userId", null));
-        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, null, DIRECTORY, accessRightsAttributes, "userId", 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
-        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", null, accessRightsAttributes, "userId", 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
-        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, null, "userId", 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
-        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, accessRightsAttributes, null, 1L, "description", zonedCreationDate, zonedCreationDate, "userId"));
+        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, null, DIRECTORY, accessRightsAttributes, "userId", 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
+        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", null, accessRightsAttributes, "userId", 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
+        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, null, "userId", 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
+        assertThrows(NullPointerException.class, () -> toElementAttributes(ELEMENT_UUID, "name", DIRECTORY, accessRightsAttributes, null, 1L, "description", offsetCreationDate, zonedCreationDate, "userId"));
     }
 
     @Test
@@ -126,12 +129,13 @@ public class ElementAttributesTest {
     @Test
     public void testJsonString() {
         ZonedDateTime creationDate = ZonedDateTime.now(ZoneOffset.UTC);
+        OffsetDateTime offsetCreationDate = OffsetDateTime.now(ZoneOffset.UTC);
         DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE_TIME;
-        String formattedCreationDate = creationDate.format(formatter);
-
+        String formattedCreationDate = offsetCreationDate.format(formatter);
+        String formattedModifDate = creationDate.format(formatter);
         assertEquals(
-            "{\"elementUuid\":\"21297976-7445-44f1-9ccf-910cbb2f84f8\",\"elementName\":\"name\",\"type\":\"DIRECTORY\",\"accessRights\":{\"isPrivate\":true},\"owner\":\"userId\",\"subdirectoriesCount\":1,\"description\":\"description\",\"creationDate\":\"" + formattedCreationDate + "\",\"lastModificationDate\":\"" + formattedCreationDate + "\",\"lastModifiedBy\":\"userId\"}",
-            toJsonString(toElementAttributes(UUID.fromString("21297976-7445-44f1-9ccf-910cbb2f84f8"), "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", creationDate, creationDate, "userId"))
+            "{\"elementUuid\":\"21297976-7445-44f1-9ccf-910cbb2f84f8\",\"elementName\":\"name\",\"type\":\"DIRECTORY\",\"accessRights\":{\"isPrivate\":true},\"owner\":\"userId\",\"subdirectoriesCount\":1,\"description\":\"description\",\"creationDate\":\"" + formattedCreationDate + "\",\"lastModificationDate\":\"" + formattedModifDate + "\",\"lastModifiedBy\":\"userId\"}",
+            toJsonString(toElementAttributes(UUID.fromString("21297976-7445-44f1-9ccf-910cbb2f84f8"), "name", DIRECTORY, new AccessRightsAttributes(true), "userId", 1L, "description", offsetCreationDate, creationDate, "userId"))
         );
     }
 
@@ -171,6 +175,10 @@ public class ElementAttributesTest {
             DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE_TIME;
             return String.format("\"%s\":\"%s\"", key, ((ZonedDateTime) value).format(formatter));
         }
+        if (value instanceof OffsetDateTime) {
+            DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE_TIME;
+            return String.format("\"%s\":\"%s\"", key, ((OffsetDateTime) value).format(formatter));
+        }
         return String.format(value instanceof String || value instanceof UUID ? "\"%s\":\"%s\"" : "\"%s\":%s", key, value);
     }
 }
